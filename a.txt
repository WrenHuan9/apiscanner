uWBr: function(e, t, n) {
        "use strict";
        t.a = {
            auth: {
                login: "user-service/login",
                loginByCode: "open-service/open/thirdPartyLogin/loginByCode",
                openLogin: "open-service/open/thirdPartyLogin",
                thirdPartyLoginNew: "open-service/open/thirdPartyLoginNew/login",
                singleLogin: "open-service/open/loginByObfuscatedCode/singleLogin",
                dingSingleLogin: "open-service/open/jiangbei/ding/singleLoginAuth",
                appdownload: "device-service/deviceUpgPkg/getAppDownloadUrl",
                otherLogin: "user-service/other/login"
            },
            menus: {
                add: "user-service/res/add",
                get: "user-service/res/getResourceById",
                list: "user-service/res/getAllResource",
                update: "user-service/res/upd",
                del: "user-service/res/del"
            },
            position: {
                add: "user-service/position/add",
                get: "user-service/position/byId",
                list: "user-service/position/listByPage",
                listAll: "user-service/position/list",
                update: "user-service/position/upd",
                del: "user-service/position/del",
                advancedConfigurationList: "user-service/position/advancedConfigurationList"
            },
            organization: {
                add: "user-service/org/add",
                get: "user-service/org/byId",
                list: "user-service/org/list",
                update: "user-service/org/upd",
                del: "user-service/org/del",
                getOrgLogo: "user-service/org/getOrgLogoByOrgId",
                getPOrgIdWithSameLevelAuth: "user-service/org/getSameLevelOrgId",
                updOrder: "user-service/org/updOrder",
                searchByKeyword: "user-service/org/searchByKeyword"
            },
            role: {
                add: "user-service/role/add",
                get: "user-service/role/byId",
                list: "user-service/role/select",
                listAll: "user-service/role/list",
                update: "user-service/role/upd",
                del: "user-service/role/del"
            },
            user: {
                add: "user-service/user/add",
                get: "user-service/user/byId",
                list: "user-service/user/list",
                listByOrg: "user-service/user/getUserByOrg",
                update: "user-service/user/upd",
                del: "user-service/user/del",
                resetUserPwd: "user-service/user/resetUserPwd",
                updateOrgReceiver: "user-service/user/updOrgReceiver",
                getOrgUserList: "user-service/user/getOrgUserList",
                getOrgUserListByProject: "user-service/user/getOrgUserListByProject",
                updPwd: "user-service/user/updPwd",
                getUsersByPosition: "message-srv/message/getUsersByPosition",
                updPhotos: "user-service/user/updPhotos",
                importUsers: "user-service/user/import",
                getOrgDeviceTree: "user-service/user/getOrgDeviceTree",
                getUserAssign: "user-service/postRecipient/getBaseInfo",
                addUserAssign: "user-service/postRecipient/add",
                getReceiverByType: "user-service/user/getReceiverByType",
                batchUserTemplates: "user-service/user/batchUserTemplates",
                businessUserAssign: "user-service/project/personnelAssignment",
                userArea: "user-service/org/getOrgListName",
                selectUserInfoList: "user-service/user/selectUserInfoList"
            },
            areaType: {
                add: "area-service/areaType/add",
                get: "area-service/areaType/detail",
                listByPage: "area-service/areaType/listByPage",
                list: "area-service/areaType/list",
                update: "area-service/areaType/update",
                del: "area-service/areaType/delete"
            },
            area: {
                add: "area-service/area/addAreaWG",
                addArea: "area-service/area/addArea",
                orgBindImportArea: "area-service/area/orgBindImportArea",
                addAreaWGCoordinate: "area-service/area/addAreaWGCoordinate",
                get: "area-service/area/detail",
                getByAdCode: "area-service/area/adcodeDetail",
                list: "area-service/area/list",
                wgList: "area-service/area/wglist",
                update: "area-service/area/updateAreaWG",
                del: "area-service/area/deleteAreaWG",
                getAreaInfoById: "area-service/area/getAreaInfoById",
                getOrgInfo: "area-service/area/getOrgInfo",
                getUsableAdCodeList: "area-service/area/getUsableAdCodeList",
                gridList: "area-service/area/getAreaListByOrgId",
                getAreaCodeByOrgId: "area-service/area/getAreaCodeByOrgId",
                getAreaUserInfoById: "task-service/taskScreen/getExecutablePersonnel"
            },
            deviceUpdate: {
                add: "device-service/deviceUpgPkg/add",
                list: "device-service/deviceUpgPkg/listByPage",
                update: "device-service/deviceUpgPkg/upd",
                del: "device-service/deviceUpgPkg/del",
                publish: "device-service/deviceUpgPkg/publishedPkg",
                modelList: "device-service/deviceUpgModel/getDeviceUpgradeModelList"
            },
            upload: "file-server-service/upload/upload",
            device: {
                list: "device-service/hikDevice/deviceList",
                detail: "device-service/hikDevice/deviceDetail",
                addDevice: "device-service/hikDevice/addDevice",
                deleteDevice: "device-service/hikDevice/deleteDevice/",
                bind: "device-service/hikDevice/deviceBind",
                bindRelease: "device-service/hikDevice/deviceBindRelease",
                deviceList: "device-service/hikDevice/deviceAndOrgList",
                relay: "device-service/hikDevice/getRelayStreaming",
                getLiveStreaming: "device-service/hikDevice/getLiveStreaming",
                deviceBindProject: "device-service/hikDevice/deviceBindProject",
                updateDevice: "device-service/hikDevice/updateDevice"
            },
            eventManage: {
                add: "task-service/event/add",
                get: "task-service/event/getById",
                getAllBigType: "task-service/event/getAllBigType",
                list: "task-service/event/list",
                selectList: "task-service/event/selectList",
                update: "task-service/event/upd",
                del: "task-service/event/del",
                typeList: "task-service/event/typeList",
                listByTask: "task-service/eventBind/getEvents",
                exportList: "task-service/event/listExport",
                exportDetail: "task-service/event/detailExportWord",
                fileDownload: "task-service/event/fileDownload",
                addType: "task-service/event/addType",
                select: "task-service/case/select",
                getResources: "data-service/near/getResources"
            },
            task: {
                add: "task-service/task/addTask",
                list: "task-service/task/select",
                update: "task-service/task/updTask",
                del: "task-service/task/delTask",
                start: "task-service/task/start",
                updTaskStatus: "task-service/task/updTaskStatus",
                finish: "task-service/task/finish",
                get: "task-service/task/getTemporaryTask",
                getDaily: "task-service/task/getDailyTask",
                addRemark: "task-service/task/addTaskRemark",
                listRemark: "task-service/task/remarkSelect",
                listRecord: "task-service/task/getTaskRecord",
                postArea: "task-service/task/getTaskPostArea",
                listByProblemId: "task-service/task/getTaskByProblemId",
                getTaskAuth: "task-service/task/getTaskAuth",
                exportList: "task-service/task/listExport",
                exportTemporaryDetail: "task-service/task/temporaryDetailExportWord",
                exportDailyDetailExport: "task-service/task/dailyDetailExportWord",
                fileDownload: "task-service/task/fileDownload"
            },
            question: {
                add: "task-service/problem/add",
                list: "task-service/problem/select",
                update: "task-service/problem/upd",
                del: "task-service/problem/del",
                start: "task-service/problem/start",
                report: "task-service/problem/report",
                get: "task-service/problem/getProblemTask",
                typeTree: "task-service/problem/getProblemTypeTree",
                getProblemAuth: "task-service/problem/getProblemAuth",
                exportList: "task-service/problem/listExport",
                exportDetail: "task-service/problem/detailExportWord",
                fileDownload: "task-service/problem/fileDownload",
                dealUser: "user-service/user/getSameOrgUser",
                getProblemCaseList: "task-service/problem/getProblemCaseList"
            },
            pttGroup: {
                add: "user-service/userGroup/addGroup",
                list: "user-service/userGroup/selectGroup",
                update: "user-service/userGroup/updateGroupBasic",
                del: "user-service/userGroup/deleteGroup",
                userList: "user-service/userGroup/getGroupUser",
                userDel: "user-service/userGroup/delGroupUser",
                userAdd: "user-service/userGroup/addGroupUser",
                userCode: "user-service/userGroup/getUserCode"
            },
            projects: {
                add: "user-service/project",
                get: "user-service/project/detail/",
                listByPage: "user-service/project/listByPage",
                list: "user-service/project/list",
                tree: "user-service/project/tree",
                runningTree: "user-service/project/runningTree",
                update: "user-service/project",
                del: "user-service/project/",
                projectUserRef: {
                    save: "user-service/userOrg/insertOrDeleteUserOrg",
                    list: "user-service/userOrg/queryUserOrgByOrgId"
                },
                startAndCloseProject: "user-service/project/startAndCloseProject",
                getAreaProject: "user-service/project/getAreaProject",
                getProjectInfoData: "data-service/project/getProjectInfoData",
                getOrgSuppliesTree: "user-service/supplies/getOrgSuppliesTree",
                suppliesBindProject: "user-service/supplies/suppliesBindProject",
                querySuppliesBindList: "user-service/supplies/querySuppliesBindList",
                projectDeviceList: "device-service/hikDevice/projectDeviceList"
            },
            live: {
                imAuth: "user-service/getAuthToken",
                agoraToken: "device-service/recording/getChannelKey",
                record: "device-service/recording/startRecording",
                endRecord: "device-service/recording/endRecording",
                getRecording: "device-service/recording/getRecording",
                getChannelByUserId: "device-service/recording/getChannelByUserId",
                sendMsg: "cim-service/api/message/send"
            },
            attend: {
                myAttendList: "task-service/taskAttendance/getPersonal",
                userAttendList: "task-service/taskAttendance/getUser",
                postAttendList: "task-service/taskAttendance/getPost",
                inPostList: "task-service/taskAttendance/getInPost",
                userOverseeList: "task-service/taskSupervise/getUser",
                postOverseeList: "task-service/taskSupervise/getPost",
                exportMyAttend: "task-service/taskDataExport/getPersonalAttendance",
                exportPeopleAttend: "task-service/taskDataExport/getUserAttendance",
                exportPostAttend: "task-service/taskDataExport/getPostAttendance",
                exportInPostAttend: "task-service/taskDataExport/getInPostSupervise",
                exportUserOversee: "task-service/taskDataExport/getUserSupervise",
                exportPostOversee: "task-service/taskDataExport/getPostSupervise",
                addUserOversee: "task-service/taskSupervise/addUserSupervise",
                addPostOversee: "task-service/taskSupervise/addPostSupervise",
                cfgAdd: "task-service/userAttendanceCfg/add",
                cfgUpdate: "task-service/userAttendanceCfg/upt",
                cfgList: "task-service/userAttendanceCfg/select",
                cfgGet: "task-service/userAttendanceCfg/getConfigDetail",
                cfgDel: "task-service/userAttendanceCfg/del",
                uptStatus: "task-service/userAttendanceCfg/uptStatus",
                getTaskByUserAttendance: "task-service/task/getTaskByUserAttendance",
                getPostInformation: "task-service/taskAttendance/getPostInformation",
                listExport: "task-service/taskAttendance/listExport"
            },
            screen: {
                messageChannel: "message-service/icsServer/command",
                command: {
                    getCommandScreenData: "data-service/largeScreen/getCommandScreenData",
                    screenMap: "message-service/icsServer/screenMap",
                    getScreenData: "task-service/taskScreen/getScreenData",
                    getScreenTask: "task-service/task/getScreenTask",
                    getTaskPostLine: "task-service/taskAttendance/getTaskPostLine",
                    getTaskPersonalLine: "task-service/taskAttendance/getTaskPersonalLine",
                    getUserHistoryPosition: "message-srv/message/getUserHistoryPosition",
                    getDeviceHistoryPosition: "device-service/hikDevice/historyLocation",
                    jlHistoryLocation: "device-service/hikDevice/jlHistoryLocation",
                    getScreenOverallData: "task-service/taskScreen/getScreenOverallData",
                    getScreenEventData: "task-service/event/screenSelect",
                    getScreenProblemData: "task-service/problem/selectScreenTask",
                    getScreenDeviceData: "device-service/hikDevice/screenDataDevice",
                    getScreenOnlineUser: "message-srv/message/getOnlineOrOfflineUser",
                    getScreenMapData: "message-srv/message/getScreenMapData",
                    getOnlineDeviceType: "message-srv/userOnline/getOnlineDeviceTypeByUserId",
                    batchGetUserOnline: "message-srv/message/batchGetUserOnline",
                    getOrgDetail: "user-service/org/getOrgStatisticsById",
                    getPoliticalTopics: "data-service/politicsTopics/getPoliticalTopics",
                    queryPopulationData: "data-service/population/queryPopulationData",
                    CulturalCreativity: "data-service/culturalCreativity/getCulturalCreativity",
                    getControlBuild: "task-service/controlBuild/getScreen",
                    addCollectionPosition: "data-service/jiangBeiPosition/addPosition",
                    collectionPositionList: "data-service/jiangBeiPosition/positionList",
                    collectionPositionDel: "data-service/jiangBeiPosition/deletePosition",
                    callPhone: "device-service/jiangBeiTel/callPhone"
                },
                dataStatistics: {
                    accumulateInfo: "data-service/largeScreen/accumulateInfo",
                    transactionType: "data-service/largeScreen/transactionType",
                    getAreaService: "data-service/largeScreen/getAreaServiceStatistics",
                    getOverallAttendance: "data-service/largeScreen/getOverallAttendanceStatistics",
                    getEventGroupByEventType: "data-service/intelligentAnalysis/getEventGroupByEventType",
                    getAreaDataStatistics: "data-service/largeScreen/getAreaDataStatistics",
                    eventHeatMap: "data-service/largeScreen/eventHeatMap",
                    getEventAggregation: "data-service/eventAggregation/getEventAggregation",
                    getAreaManualTypeTop3: "data-service/largeScreen/getAreaManualTypeTop3",
                    getScreenData: "data-service/largeScreen/getScreenData"
                }
            },
            domainLogo: {
                list: "user-service/domainLogo/getSystemDomainLogo",
                listByPage: "user-service/domainLogo/getSystemDomainLogoByPage",
                add: "user-service/domainLogo/addSystemDomainLogo",
                del: "user-service/domainLogo/delSystemDomainLogo",
                upd: "user-service/domainLogo/updSystemDomainLogo"
            },
            systemIndex: {
                add: "user-service/orgLinkLogo/add",
                delete: "user-service/orgLinkLogo/delete",
                get: "user-service/orgLinkLogo/getDetail",
                getByOrgId: "user-service/orgLinkLogo/getDetailByOrgId",
                list: "user-service/orgLinkLogo/getList",
                update: "user-service/orgLinkLogo/update",
                getAuthList: "user-service/orgLinkLogo/getAuthList",
                getAuthorizeCode: "user-service/user/getAuthorizeCode"
            },
            record: {
                list: "device-service/video/getVideoByPage",
                downloadVideo: "device-service/video/downloadVideo",
                caseList: "task-service/registerApply/select",
                caseDetail: "task-service/registerApply/getDetail",
                caseAdd: "task-service/registerApply/add",
                deviceAlarm: {
                    list: "task-service/dustAlarm/list",
                    detail: "task-service/dustAlarm/getById",
                    caseList: "task-service/registerApply/getBySource",
                    download: "task-service/registerApply/reportDownload"
                },
                listExportNum: "device-service/video/listExportNum",
                listExport: "device-service/video/listExport"
            },
            operation: {
                list: "open-service/thirdPartyAuth/getList",
                add: "open-service/thirdPartyAuth/add",
                update: "open-service/thirdPartyAuth/update",
                delete: "open-service/thirdPartyAuth/delete/",
                getSyncData: "open-service/thirdPartyAuth/get/syncData/",
                addSyncData: "open-service/thirdPartyAuth/add/syncData",
                updateSyncData: "open-service/thirdPartyAuth/update/syncData",
                getSetting: "user-service/rollCall/getSetting",
                addSetting: "user-service/rollCall/addSetting",
                uptSetting: "user-service/rollCall/uptSetting",
                delSetting: "user-service/rollCall/delSetting",
                getPhoto: "user-service/rollCall/getPhoto",
                addPhoto: "user-service/rollCall/addPhoto",
                getUserLog: "user-service/runLog/list"
            },
            supervise: {
                getByType: "user-service/systemConfig/getByType",
                add: "user-service/statute/add",
                import: "user-service/statute/import",
                list: "user-service/statute/select",
                del: "user-service/statute/delete",
                update: "user-service/statute/update",
                checkList: "user-service/statute/selectForStandBook",
                powerList: "user-service/powerList/list",
                powerImport: "user-service/powerList/import",
                queryInformationList: "data-service/pc/information/queryInformationList",
                insertInformation: "data-service/pc/information/insertInformation",
                deleteInformation: "data-service/pc/information/deleteInformation",
                updateInformation: "data-service/pc/information/updateInformation",
                queryInformationDetaile: "data-service/pc/information/queryInformationDetaile"
            },
            baseConfig: {
                list: "user-service/rollingMessage/getRollingMessageByPage",
                add: "user-service/rollingMessage/addRollingMessage",
                update: "user-service/rollingMessage/updRollingMessage",
                del: "user-service/rollingMessage/delRollingMessage",
                getEnabledRollingMessage: "user-service/rollingMessage/getEnabledRollingMessage",
                updateBase: "user-service/orgBaseInfo/updOrgBaseInfo",
                getBase: "user-service/orgBaseInfo/getOrgBaseInfo",
                appBannerList: "user-service/appBanner/appBannerList",
                addAppBanner: "user-service/appBanner/addAppBanner",
                deleteAppBanner: "user-service/appBanner/deleteAppBanner/",
                enableAppBanner: "user-service/appBanner/enableAppBanner/",
                appNameList: "user-service/appName/nameList",
                setAppName: "user-service/appName/nameSetting"
            },
            dregsAlarm: {
                list: "task-service/alarm/select",
                pushList: "task-service/alarm/selectPush",
                statusList: "user-service/systemConfig/getByType?type=alarmStatus",
                getTaskByResource: "task-service/task/getTaskByResource",
                closeAlarm: "task-service/alarm/closeAlarm",
                updateAlarm: "task-service/alarm/updateAlarm",
                getAlarmById: "task-service/alarm/getAlarmById",
                getPushAlarmById: "task-service/alarm/getPushAlarmById",
                caseList: "task-service/problemCase/select",
                getProblemDetail: "task-service/problem/getProblemByCaseId",
                alarmHandle: "task-service/alarm/handle",
                getAlarmOrg: "task-service/alarm/getOrgS",
                alarmhandleDetail: "task-service/alarm/handleDetail",
                selectHandlerHistoryForWeb: "task-service/dregs/selectHandlerHistoryForWeb",
                getCarHandlerHistoryDetail: "task-service/dregs/getCarHandlerHistoryDetail",
                addRecordSummary: "task-service/recordSummary/add",
                deleteRecordSummary: "task-service/recordSummary/del",
                detailRecordSummary: "task-service/recordSummary/getById",
                getRecordSummary: "task-service/recordSummary/list",
                exportRecordSummary: "task-service/recordSummary/listExport",
                updateRecordSummary: "task-service/recordSummary/upd"
            },
            organizeInfo: {
                userInfo: {
                    list: "user-service/org/userList",
                    userExport: "user-service/org/userExport",
                    listExport: "user-service/org/userListExport"
                },
                attendance: {
                    list: "data-service/orgInfo/getOrgDataStatistics",
                    statistics: "data-service/orgInfo/getOrgAttendancePolyline",
                    online: "data-service/orgInfo/getOrgAttendanceOnline",
                    exportList: "data-service/orgInfo/exportOrgStatisticsList",
                    exportDetail: "data-service/orgInfo/exportOrgStatisticsDetail"
                },
                business: {
                    list: "data-service/orgInfo/getOrgBusinessList",
                    exportList: "data-service/orgInfo/exportOrgBusinessList",
                    exportDetail: "data-service/orgInfo/exportOrgBusinessDetail"
                }
            },
            warning: {
                getDetail: "task-service/systemAlarm/getDetail",
                list: "task-service/systemAlarm/select",
                send: "task-service/systemAlarm/sendInfoToUser",
                export: "task-service/systemAlarm/export"
            },
            controlViolate: {
                list: "task-service/controlBuild/select",
                manage: {
                    list: "task-service/controlBuild/selectOrder",
                    detail: "task-service/controlBuild/getOrderDetail",
                    getImg: "task-service/controlBuild/getImage",
                    getGrids: "task-service/controlBuild/getGrids"
                }
            },
            systemConfig: {
                getEnum: "user-service/systemConfig/getByType"
            },
            material: {
                list: "user-service/supplies/select",
                add: "user-service/supplies/add",
                update: "user-service/supplies/upd",
                detail: "user-service/supplies/byId",
                del: "user-service/supplies/del",
                enable: "user-service/supplies/enable",
                export: "user-service/supplies/export"
            },
            postInspection: {
                generateFullInspect: "task-service/postCheck/adPostFullCheck",
                fullCheckRecords: "task-service/postCheck/postFullCheckRecords",
                postSpotCheckScreenMap: "task-service/postCheck/postSpotCheckScreenMap",
                addPostSpotCheck: "task-service/postCheck/addPostSpotCheck",
                spotCheckRecords: "task-service/postCheck/postSpotCheckRecords",
                postSpotExports: "task-service/postCheck/postSpotExports",
                postFullExports: "task-service/postCheck/postFullExports"
            },
            constructionSite: {
                add: "task-service/constructionManagement/add",
                upd: "task-service/constructionManagement/upd",
                list: "task-service/constructionManagement/list",
                getById: "task-service/constructionManagement/getById",
                export: "task-service/constructionManagement/export"
            },
            siteInformation: {
                add: "task-service/buildingData/add",
                list: "task-service/buildingData/getUserBuildingS",
                detail: "task-service/buildingData/getByBuildingId",
                examineList: "task-service/buildingData/getApproveByBuildingId",
                examineAdd: "task-service/buildingData/addApprove"
            },
            dataFilling: {
                selectDataList: "data-service/dataReporting/selectDataList",
                exportDataInfo: "data-service/dataReporting/exportDataInfo",
                getDataInfo: "data-service/dataReporting/getDataInfo",
                updateDataInfo: "data-service/dataReporting/updateDataInfo",
                getTemplateByReportUserId: "data-service/dataReporting/getTemplateByReportUserId"
            },
            templateManage: {
                getAllTemplateList: "data-service/template/getAllTemplateList",
                getOrgList: "data-service/template/getOrgTree",
                insertOrUpdateTemplate: "data-service/template/insertOrUpdateTemplate",
                getUserList: "data-service/template/getUserList",
                selectTemplateInfoById: "data-service/template/selectTemplateInfoById",
                excelData: "data-service/template/excelDataByCondition",
                tempView: "data-service/template/tempView",
                reSort: "data-service/template/reSort",
                deleteById: "data-service/template/deleteById",
                deleteKindId: "data-service/templateType/deleteKindId",
                excelTemplate: "data-service/template/excelTemplate",
                excelReportDataTemplate: "data-service/template/excelReportDataTemplate",
                chanageCollectStatus: "data-service/template/chanageCollectStatus"
            },
            dataAnalysis: {
                eventAnalysis: "data-service/dataStatistics/eventAnalysis",
                taskStatic: "data-service/taskStatistics/queryTaskStatistics",
                problemStatic: "data-service/dataStatistics/problemAnalysis",
                attendance: "data-service/taskStatistics/attendance",
                dataReport: "data-service/dataReportForm",
                exportOnlyData: "data-service/dataReportFormInfoExcel",
                exportData: "data-service/dataReportFormExcel",
                dayDetail: "data-service/dataReportFormByDate",
                dayExport: "data-service/dataReportFormByDateExcel"
            },
            urgentEvent: {
                eventLevel: "task-service/jiangBeiEvent/typeList",
                updateLevel: "task-service/jiangBeiEvent/updateEventTypeLevel",
                levelList: "task-service/jiangBeiEvent/selectTypeByLevel",
                getEventScreen: "task-service/jiangBeiEvent/selectJiangBeiEventScreen",
                list: "task-service/jiangBeiEvent/selectByGroup",
                detail: "task-service/jiangBeiEvent/getJiangBeiEventDetail",
                isRead: "task-service/jiangBeiEvent/readJiangBeiEvent",
                isClose: "task-service/jiangBeiEvent/closeJiangBeiEvent",
                isCommand: "task-service/jiangBeiEvent/commandJiangBeiEvent",
                guid: "task-service/jiangBeiEvent/insertOperationRecord",
                guidList: "task-service/jiangBeiEvent/selectOperationRecord"
            },
            myExam: {
                list: "task-service/examination/myExamination",
                submitAnswer: "task-service/examination/submitAnswer",
                getResult: "task-service/examination/getResult",
                scoreList: "task-service/examination/viewResults",
                judgeExamination: "task-service/examination/judgeExamination",
                referenceNow: "task-service/examination/referenceNow",
                addQuestionBank: "task-service/question-bank/add",
                questionBankList: "task-service/question-bank/list-all",
                bankDetail: "task-service/question-bank/list-one",
                editeBank: "task-service/question-bank/update",
                delBank: "task-service/question-bank/delete",
                updateBankState: "task-service/question-bank/update-state",
                addQuestion: "task-service/question/add",
                delQuestions: "task-service/question/delete",
                questionList: "task-service/question/list-all",
                questionDetail: "task-service/question/list-one",
                updateQuestion: "task-service/question/update",
                updateQuestionState: "task-service/question/update-state",
                testList: "task-service/examination/queryExaminationList",
                testDetail: "task-service/examination/queryExamDetail",
                queryExamTopStatistics: "task-service/examination/queryExamTopStatistics",
                queryPersonExamStatistics: "task-service/examination/queryPersonExamStatistics",
                queryOrgExamStatistics: "task-service/examination/queryOrgExamStatistics",
                queryScoreStatistics: "task-service/examination/queryScoreStatistics",
                delTest: "task-service/examination/deleteExamList/",
                listAllSelected: "task-service/question-bank/list-all-selected",
                getQuestionNumByBank: "task-service/examination/getQuestionNumByBank",
                addExamination: "task-service/examination/addExamination",
                updateExamination: "task-service/examination/updateExamination",
                export: "task-service/examination/exportExamStatistics",
                pubState: "task-service/examination/updateExamPublishStatus"
            },
            workOrder: {
                add: "task-service/work-order/add",
                update: "task-service/work-order/update",
                list: "task-service/work-order/list",
                del: "task-service/work-order/delete",
                detail: "task-service/work-order/detail",
                record: "task-service/work-order/record",
                operate: "task-service/work-order/detail-operate",
                queryUserByName: "user-service/user/queryUserByName",
                queryOnlyUserByName: "user-service/user/queryOnlyUserByName",
                operationWorkOrderDeadLine: "task-service/work-order/operationWorkOrderDeadLine",
                workOrderListExport: "task-service/work-order/workOrderListExport",
                findAllType: "task-service/work-order/findAllType"
            },
            workOrderProcess: {
                list: "task-service/process/list",
                add: "task-service/process/add",
                update: "task-service/process/update",
                detail: "task-service/process/detail",
                delete: "task-service/process/delete",
                status: "task-service/process/status",
                allList: "task-service/process/list-all",
                receive: "task-service/process/receive"
            },
            comprehensive: {
                getScreenData: "data-service/largeScreen/jiangBei/getScreenData",
                findBaseData: "task-service/work-order/findBaseData",
                findTrendData: "task-service/work-order/findTrendData ",
                eventAndAttendance: "data-service/jiangBeiLargeScreen/eventAndAttendance",
                getMerchantColor: "user-service/other/getMerchantColor",
                getMerchantInfo: "user-service/other/getMerchantInfo",
                getMerchantTopFive: "user-service/other/getMerchantTopFive"
            }
        }
    }